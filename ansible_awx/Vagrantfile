# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'openssl'
require 'base64'
require 'io/console'

VAGRANTFILE_API_VERSION = "2"

# OS Flavor
osFlavor = "centos/7"
# osFlavor = "generic/rhel7"
# If you change to RHEL7 you will need to provide a valid username and password for 
# Red Hat Portal. As a developer, you can create a free account and provision as much 
# servers as you want once they all be attached to your account.

# Prefix for Project
project = "iactool"

# Hostname suffix
dnsZone = "lincolmlabs.cloud"

decrypted = ''
rhUser = ''
rhPwd = ''
masterName = ''

if osFlavor.include? "rhel"
  if ENV['lincolmlabs_vagrant_key'].nil? or ENV['lincolmlabs_vagrant_iv'].nil?
    printf "Sorry. How can I cipher/decipher if I do not know the key and initialization vector?\n"
    printf "First define the environment variables lincolmlabs_vagrant_key and lincolmlabs_vagrant_iv.\n"
    printf "Second, change their names once you understand what they do.\n"
    exit 1
  end
  # .rhuser will be create as a valid Ruby file containing your username and password
  # but cryptographed with OpenSSL using algoritm AES-256-CBC. 
  if not File.file?(".rhuser")
    eval File.read('redHatPortal.rb')
  end
  key = ''
  iv = ''
  # This keys are just openssl key and iv to cipher the RedHat Portal user and Login. 
  # You can use any valid values for your own key and iv. The value must be stored on env
  # to just facilitate multiple usages. You can type every time, if you want.
  key = Base64.decode64(ENV['lincolmlabs_vagrant_key']).strip
  iv = Base64.decode64(ENV['lincolmlabs_vagrant_iv']).strip

  decipher = OpenSSL::Cipher.new('AES-256-CBC')
  decipher.padding = 1
  decipher.decrypt
  decipher.key = key
  decipher.iv  = iv
  
  decrypted = decipher.update(Base64.decode64(File.read(".rhuser"))) + decipher.final
end

eval(decrypted, binding)

cluster = {
  "master" => { :subnet => "10.9.10", :hostsCount => 1, :cpus => 1, :mem => 1024 },
  "worker" => { :subnet => "10.9.11", :hostsCount => 1, :cpus => 1, :mem => 1024 }
}

required_plugins = %w( vagrant-hostmanager vagrant-hostsupdater vagrant-dns )
required_plugins.each do |plugin|
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  cluster.each_with_index do |(group, info), index|
      
    (1..info[:hostsCount].to_int).each do |idx|

      config.vm.define "#{project}-#{group}-#{idx}" do |node|
        address="#{info[:subnet]}.#{idx + 1}"
        if Vagrant.has_plugin?("vagrant-vbguest") then
          node.vbguest.auto_update = true
        end

        node.dns.tld = "#{dnsZone}"

        node.vm.box = "#{osFlavor}"
        node.vm.network :private_network, ip: "#{address}"
        node.vm.hostname = "#{project}-#{group}-#{idx}.#{dnsZone}"
        # We do not need synced folders. We can do scp directly to our servers.
        node.vm.synced_folder '.', '/vagrant', disabled: true
        
        node.vm.provider "virtualbox" do |vb|
          vb.gui = false
          vb.name = "#{project}-#{group}-#{idx}"
          vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus], "--hwvirtex", "on", "--audio", "none", "--natdnshostresolver1", "on"]
        end

        if group.include? "master"
          masterName = node.vm.hostname
        end

        node.vm.provision "shell", args: "'#{rhUser}' '#{rhPwd}' '#{masterName}'", inline: <<-SHELL
          echo 'export TZ=America/Sao_Paulo'>>/etc/bashrc
          rm -f /etc/localtime
          ln -s /usr/share/zoneinfo/$TZ /etc/localtime
          sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          systemctl restart sshd

          if [ "$1" != "" ]; then
            hash subscription-manager
            if [ $? == 0 ]; then #if RHEL, thats why you need to use your own username and password
              subscription-manager register --username "$1" --password "$2" --auto-attach --force
              subscription-manager auto-attach
              subscription-manager repos --enable rhel-7-server-ansible-2.9-rpms            
            fi
          else
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          fi

          yum update --security -y          
          yum install -y ntpdate curl git

          
          #NTP service
          hash ntpdate
          if [ $? == 0 ]; then
            ntpdate a.ntp.br
            systemctl start ntpdate
            systemctl enable ntpdate
          fi

          # Install AWX if master
          if [ "$(hostname)" == "$3" ]; then
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum install docker-ce -y
            yum install ansible libselinux-python3 -y

            usermod -aG docker vagrant

            systemctl start docker
            systemctl enable docker

            pip3 install requests
            pip3 install docker
            pip3 install docker-compose

            # Install AWX from GitHub
            version="$(curl -sL https://github.com/ansible/awx/releases | egrep '/ansible/awx/releases/tag/[0-9]{2}.[0-9].[0-9]' | head -n 1 | cut -d'"' -f2 | rev | cut -d'/' -f1 | rev)"
            git clone -b $version https://github.com/ansible/awx.git
            cd awx/installer
            ansible-playbook -i inventory install.yml
          fi
        SHELL
      end
    end
  end
end

